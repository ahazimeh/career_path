symetric algorithms
block ciphers: encrypt data in fixed-size blocks (eg 128 bits)
stream ciphers: encrypt data bit by bit or byte by byte

des algorithms
  openssl enc -des-ecb -in clear.txt -out ciphertext.bin -K abcdabcd12345678 -nopad // -ecb is mode // 16 characters in hex so 64 bits
  openssl enc -des-ecb -d -in ciphertext.bin -out password.txt -K abcdabcd12345678 -nppad // -d for decrypt

ECB mode // quantity of data is different that what the algorithm requires
  to encrypt data size > block size:
    use ecb (Electronic Code Book).
      devide blocks and encrypt each 1 by itself
      -week against known plain text attack // if p1 and p4 are the same then the attacker can know this information
        so for des where number of keys are limited then the attacker can gues the key
        (for example the encryption is the same with certain key)
        ***question (is it still bad when using aes and complicated key)
    use cbc (Cipher Block Chaining).
  to encrypt data size < block size:
    Padding // add garbage value
    CTR

echo -n "maitham1hadihaid" > clear.txt
openssl enc -des-ecb -in clear.txt -out out.bin -K abcdabcd12121212 -nopad

XOR (1 is true and 1 is false)
  A xor B = C
  B xor C = A
  C xor A = B

cipher block chaining (CBC Mode)
  we will have initialization value that will do xor with p1 then we will encrypt
  then the next block will do xor with c1 result then encrypt .....
  ***question: what if we also encrypted IV // then it will take even longer

CBC Mode lab
  openssl enc -des-cbc -in hello.txt -out out.bin -K abcdabcd12345678 -iv 12341234abcdabcd -nopad
  the data is not repeated
