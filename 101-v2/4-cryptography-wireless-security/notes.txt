symetric algorithms
block ciphers: encrypt data in fixed-size blocks (eg 128 bits)
stream ciphers: encrypt data bit by bit or byte by byte

des algorithms
  openssl enc -des-ecb -in clear.txt -out ciphertext.bin -K abcdabcd12345678 -nopad // -ecb is mode // 16 characters in hex so 64 bits
  openssl enc -des-ecb -d -in ciphertext.bin -out password.txt -K abcdabcd12345678 -nppad // -d for decrypt

ECB mode // quantity of data is different that what the algorithm requires
  to encrypt data size > block size:
    use ecb (Electronic Code Book).
      devide blocks and encrypt each 1 by itself
      -week against known plain text attack // if p1 and p4 are the same then the attacker can know this information
        so for des where number of keys are limited then the attacker can gues the key
        (for example the encryption is the same with certain key)
        ***question (is it still bad when using aes and complicated key)
    use cbc (Cipher Block Chaining).
  to encrypt data size < block size:
    Padding // add garbage value
    CTR

echo -n "maitham1hadihaid" > clear.txt
openssl enc -des-ecb -in clear.txt -out out.bin -K abcdabcd12121212 -nopad

XOR (1 is true and 1 is false)
  A xor B = C
  B xor C = A
  C xor A = B

cipher block chaining (CBC Mode)
  we will have initialization value that will do xor with p1 then we will encrypt
  then the next block will do xor with c1 result then encrypt .....
  ***question: what if we also encrypted IV // then it will take even longer

CBC Mode lab
  openssl enc -des-cbc -in hello.txt -out out.bin -K abcdabcd12345678 -iv 12341234abcdabcd -nopad
  the data is not repeated

padding // just remove the -nopad
  openssl enc -des-ecb -in clear.txt -out ciphertext.bin -K abcdabcd12345678

stream cipher
  ***question why: the size of key should be equal to the size of data
    and how is it usefull if so
    and why don't we use circular key then
  real algorithm
    (old) RC4, SEAL,
    (modern) salsa20, chacha20 // used a lot in browsers, ex: chacha20 is used by chrome
    ***question: how changing the data here is worse than the previous algorithm??
      isn't it same for CBC or even the ecb as well

stream cipher algorithm
  openssl enc -rc4 -in clear.txt -out cipher.bin -pbkdf2 // password based key derivation function
  openssl enc -rc4 -d -in cipher.txt -out clear2.bin -pbkdf2 // enter password

// each 1 helps me with something, stream cipher have issue with synchronization if a bit was removed so we can use them for local encryption
  I can encrypt locally if I am confident there is no malewar reading the key
  block cipher over network

key destribution
  -exchange of keys oob (out of bound)
  -key exchange algorithms

asymetric cryptography
  high computational load
  main algorithms:
    Diffie-Hellman, RSA, DSA, EL GAMAL...

digital signature (encrypt using secret key)

RSA
  the complexity of the operations depends on the number of bits with value 1 in E and D
  E=3, 17, 65537
  lab:
    openssl genrsa -out private.pem 2048
    openssl rsa -out private.pem -pubout -out public.pem
    openssl pkeyutl -encrypt/-decrypt -pubin -inkey public/private -in file -out file

Diffie-Hellman (DH) and Elliptic Curve Diffie-Hellman (ECDH)

hash function
  -fast, pre-image resistance, collision resistance
  sha2
    md2, md4, md5 can be broken
    sha224 -> sha512
    sha512 excellent
  sha3

  send message with the hash of the message
    mac, mic, mid
    mac:
      hash the message and send the hash with the message
    enable HMAC
      add the secret key to the hash // Enable HMAC
    lab:
      echo -n "message" >msg.txt
      openssl dgst -md5 msg.txt >md5.txt // use -sha256 instead for less collision
      openssl dgst -md5 -hmac "secret" msg.txt >md5.txt

digital signature doesn't require sending a secret before but digital signature is slower // generating the digital signature then encrypting it

public key certificate
  send public key
  x509
  -Version: 3
  -Serial number: 12abd123
  -issues Algorithm: RSA with SHA2
  -issuer: C=LB O=Semicolon
  -validity: 1/1/25 - 1/1/26
  -public key info: public key: xxxxx
  -CA signature: xxxx:xxxxx

-------------------------------------------------- session --------------------------------------------------
ctr can replace of padding
cbc mac
digital vs handwritten ??

hash detector

use db browser for sqlite
echo -n 'sdfsdf' | openssl dgst -sha256

hashcat -m 1400 -a 0 hashes.txt rockyou.txt // -sha256 for 1400
